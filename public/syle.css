<!DOCTYPE html >
<html lang="id" >
<head >
<meta charset="UTF-8" >
<meta name="viewport" content="width=device-width, initial-scale=1.0" >
<title > Dashboard Admin - Aplikasi Selisih Berat</title >
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" >
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" >
<link href="/style.css" rel="stylesheet" >
</head >
<body >
<div class="container-fluid" style="max-width: 1600px; padding: 2rem 1rem;" >
<!-- Header -->
<div class="header-card" >
<div class="d-flex justify-content-between align-items-center flex-wrap gap-3" >
<div >
<h2 > <i class="fas fa-chart-line me-2" > </i > Dashboard Admin</h2 >
<small class="text-muted" > Welcome, <strong id="userName" > Admin</strong > </small >
</div >
<div class="d-flex gap-2 flex-wrap" >
<button id="entryBtn" class="btn btn-primary" >
<i class="fas fa-plus-circle" > </i > New Entry
</button >
<button id="exportBtn" class="btn btn-success" >
<i class="fas fa-file-excel" > </i > Export
</button >
<button id="logoutBtn" class="btn btn-danger" >
<i class="fas fa-sign-out-alt" > </i > Logout
</button >
</div >
</div >
</div >
<!-- Statistics Cards -->
<div class="row g-4 mb-4" >
<div class="col-md-4" >
<div class="stats-card" >
<div class="stats-icon bg-primary" >
<i class="fas fa-box" > </i >
</div >
<div class="stats-content" >
<h3 id="totalEntries" > 0</h3 >
<p > Total Entries</p >
</div >
</div >
</div >
<div class="col-md-4" >
<div class="stats-card" >
<div class="stats-icon bg-success" >
<i class="fas fa-calendar-day" > </i >
</div >
<div class="stats-content" >
<h3 id="todayEntries" > 0</h3 >
<p > Today's Entries</p>
</div >
</div >
</div >
<div class="col-md-4" >
<div class="stats-card" >
<div class="stats-icon bg-warning" >
<i class="fas fa-balance-scale" > </i >
</div >
<div class="stats-content" >
<h3 id="avgSelisih" > 0 KG</h3 >
<p > Avg. Selisih</p >
</div >
</div >
</div >
</div >
<!-- Filters & Search -->
<div class="form-card mb-4" >
<div class="row g-3" >
<div class="col-md-4" >
<input type="text" class="form-control" id="searchInput" placeholder="🔍 Search by No Resi or Nama..." >
</div >
<div class="col-md-3" >
<select class="form-select" id="statusFilter" >
<option value="" > All Status</option >
<option value="submitted" > Submitted</option >
<option value="reviewed" > Reviewed</option >
<option value="approved" > Approved</option >
<option value="rejected" > Rejected</option >
</select >
</div >
<div class="col-md-2" >
<select class="form-select" id="limitSelect" >
<option value="10" > 10 per page</option >
<option value="25" > 25 per page</option >
<option value="50" > 50 per page</option >
<option value="100" > 100 per page</option >
</select >
</div >
<div class="col-md-3" >
<button class="btn btn-primary w-100" id="searchBtn" >
<i class="fas fa-search" > </i > Search
</button >
</div >
</div >
</div >
<!-- Data Table -->
<div class="form-card" >
<div class="table-responsive" >
<table class="table table-hover" >
<thead >
<tr >
<th > No</th >
<th > Tanggal</th >
<th > Nama</th >
<th > No Resi</th >
<th > Berat Resi</th >
<th > Berat Aktual</th >
<th > Selisih</th >
<th > Status</th >
<th > Foto</th >
<th > Actions</th >
</tr >
</thead >
<tbody id="tableBody" >
<tr >
<td colspan="10" class="text-center py-4" >
<i class="fas fa-spinner fa-spin" > </i > Loading data...
</td >
</tr >
</tbody >
</table >
</div >
<!-- Pagination -->
<div class="d-flex justify-content-between align-items-center mt-3" >
<div >
<small class="text-muted" > Showing <span id="showingInfo" > 0-0 of 0</span > </small >
</div >
<nav >
<ul class="pagination mb-0" id="pagination" > </ul >
</nav >
</div >
</div >
</div >
<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" >
<div class="modal-dialog" >
<div class="modal-content" >
<div class="modal-header" >
<h5 class="modal-title" > Edit Entry</h5 >
<button type="button" class="btn-close" data-bs-dismiss="modal" > </button >
</div >
<div class="modal-body" >
<input type="hidden" id="editId" >
<div class="mb-3" >
<label class="form-label" > Status</label >
<select class="form-select" id="editStatus" >
<option value="submitted" > Submitted</option >
<option value="reviewed" > Reviewed</option >
<option value="approved" > Approved</option >
<option value="rejected" > Rejected</option >
</select >
</div >
<div class="mb-3" >
<label class="form-label" > Notes</label >
<textarea class="form-control" id="editNotes" rows="3" > </textarea >
</div >
</div >
<div class="modal-footer" >
<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" > Cancel</button >
<button type="button" class="btn btn-primary" id="saveBtn" > Save</button >
</div >
</div >
</div >
</div >
<!-- Photo Modal -->
<div class="modal fade" id="photoModal" tabindex="-1" >
<div class="modal-dialog modal-lg" >
<div class="modal-content" >
<div class="modal-header" >
<h5 class="modal-title" > Photos</h5 >
<button type="button" class="btn-close" data-bs-dismiss="modal" > </button >
</div >
<div class="modal-body" >
<div class="row g-3" id="photoContainer" > </div >
</div >
</div >
</div >
</div >

<div id="toastContainer" class="toast-container" > </div >

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" > </script >
<script >
const accessToken = localStorage.getItem('accessToken');
const userName = localStorage.getItem('userName');
const userRole = localStorage.getItem('userRole');

// Check authentication and role
if (!accessToken || userRole !== 'admin') {
    window .location.href = '/login.html';
}

document.getElementById('userName').textContent = userName;

let currentPage = 1;
let currentLimit = 10;
let currentSearch = '';
let currentStatus = '';
let editModal, photoModal;

// Initialize modals
document.addEventListener('DOMContentLoaded', () => {
            editModal = new bootstrap.Modal(document.getElementById('editModal'));
            photoModal = new bootstrap.Modal(document.getElementById('photoModal'));
            loadStatistics();
            loadEntries();
        });

// Load statistics
async function loadStatistics() {
    try

{
    const response = await fetch('/api/entries/statistics', {
                    headers: { 'Authorization': `Bearer ${accessToken}` }
                });
    if (!response.ok) throw new Error('Failed to load stats');
    const stats = await response.json();
    document .getElementById('totalEntries').textContent = stats.totalEntries || 0;
    document .getElementById('todayEntries').textContent = stats.todayEntries || 0;
    document .getElementById('avgSelisih').textContent = `$

{
    stats .avgSelisih || '0.00'
}

KG`;
}

catch (error) {
    console .error('Error loading statistics:', error);
}

}

// Load entries
async function loadEntries() {
    const tbody = document.getElementById('tableBody');
    tbody .innerHTML = '<tr><td colspan="10" class="text-center py-4"><i class="fas fa-spinner fa-spin"></i> Loading...</td></tr>';
    try

{
    const params = new URLSearchParams({
                    page: currentPage,
                    limit: currentLimit,
                    search: currentSearch,
                    status: currentStatus
                });
    const response = await fetch(`/api/entries?${params}`, {
                    headers: { 'Authorization': `Bearer ${accessToken}` }
                });
    if (!response.ok) throw new Error('Failed to load entries');
    const result = await response.json();
    displayEntries(result.data);
    displayPagination(result.pagination);
}

catch (error) {
    console .error('Error loading entries:', error);
    tbody .innerHTML = '<tr><td colspan="10" class="text-center text-danger py-4">Failed to load data</td></tr>';
}

}

function displayEntries(entries) {
    const tbody = document.getElementById('tableBody');
    if (entries.length === 0)

{
    tbody .innerHTML = '<tr><td colspan="10" class="text-center py-4">No data found</td></tr>';
    return;
}

tbody.innerHTML = entries.map((entry, index) => {
                const statusBadge = {
                    submitted: 'bg-primary',
                    reviewed: 'bg-info',
                    approved: 'bg-success',
                    rejected: 'bg-danger'
                }[entry.status] || 'bg-secondary';

                const no = ((currentPage - 1) * currentLimit) + index + 1;

                return `
                    <tr>
                        <td>${no}</td>
                        <td>${new Date(entry.created_at).toLocaleDateString('id-ID')}</td>
                        <td>${entry.nama}</td>
                        <td><strong>${entry.no_resi}</strong></td>
                        <td>${entry.berat_resi} KG</td>
                        <td>${entry.berat_aktual} KG</td>
                        <td><strong>${entry.selisih} KG</strong></td>
                        <td><span class="badge ${statusBadge}">${entry.status}</span></td>
                        <td>
                            <button class="btn btn-sm btn-info" onclick="viewPhotos('${entry.foto_url_1}', '${entry.foto_url_2}')">
                                <i class="fas fa-image"></i>
                            </button>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="editEntry(${entry.id}, '${entry.status}', '${entry.catatan || ''}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteEntry(${entry.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
}

function displayPagination(pagination) {
    const paginationEl = document.getElementById('pagination');
    const start = ((pagination.page - 1) * pagination.limit) + 1;
    const end = Math.min(pagination.page * pagination.limit, pagination.total);
    document .getElementById('showingInfo').textContent = `$

{
    start
}

-$ {
    end
}

of $ {
    pagination .total
}

`;

if (pagination.totalPages <= 1) {
    paginationEl .innerHTML = '';
    return;
}

let html = '';

// Previous button
html + = `<li class="page-item ${pagination.page === 1 ? 'disabled' : ''}" >
<a class="page-link" href="#" onclick="changePage(${pagination.page - 1})" > Previous</a >
</li > `;

// Page numbers
for (let i = 1; i <= pagination.totalPages; i++) {
    if (i === 1 || i === pagination.totalPages || (i >= pagination.page - 2 && i <= pagination.page + 2))

{
    html += `<li class="page-item ${i === pagination.page ? 'active' : ''}"> <a class="page-link" href="#" onclick="changePage(${i})">$

{
    i
}

</a >
</li > `;
}

else if (i === pagination.page - 3 || i === pagination.page + 3) {
    html += '<li class="page-item disabled"><span class="page-link">...</span></li>';
}

}

// Next button
html + = `<li class="page-item ${pagination.page === pagination.totalPages ? 'disabled' : ''}" >
<a class="page-link" href="#" onclick="changePage(${pagination.page + 1})" > Next</a >
</li > `;

paginationEl.innerHTML = html;
}

function changePage(page) {
    currentPage = page;
    loadEntries();
    window .scrollTo({ top: 0, behavior: 'smooth' });
}

// View photos
function viewPhotos(url1, url2) {
    const container = document.getElementById('photoContainer');
    container .innerHTML = '';
    if (url1 && url1 !== 'null')

{
    container .innerHTML += `<div class="col-md-6"><img src="${url1}" class="img-fluid rounded" alt="Photo 1"></div>`;
}

if (url2 && url2 !== 'null') {
    container .innerHTML += `<div class="col-md-6"><img src="${url2}" class="img-fluid rounded" alt="Photo 2"></div>`;
}

photoModal.show();
}

// Edit entry
function editEntry(id, status, notes) {
    document .getElementById('editId').value = id;
    document .getElementById('editStatus').value = status;
    document .getElementById('editNotes').value = notes || '';
    editModal .show();
}

document.getElementById('saveBtn').addEventListener('click', async () => {
            const id = document.getElementById('editId').value;
            const status = document.getElementById('editStatus').value;
            const notes = document.getElementById('editNotes').value;

            try {
                const response = await fetch(`/api/entries/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${accessToken}`
                    },
                    body: JSON.stringify({ status, notes })
                });

                if (!response.ok) throw new Error('Update failed');

                showToast('Entry updated successfully', 'success');
                editModal.hide();
                loadEntries();
                loadStatistics();
            } catch (error) {
                showToast('Error: ' + error.message, 'error');
            }
        });

// Delete entry
async function deleteEntry(id) {
    if (!confirm('Are you sure you want to delete this entry?')) return;
    try

{
    const response = await fetch(`/api/entries/${id}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${accessToken}` }
                });
    if (!response.ok) throw new Error('Delete failed');
    showToast('Entry deleted successfully', 'success');
    loadEntries();
    loadStatistics();
}

catch (error) {
    showToast('Error: ' + error.message, 'error');
}

}

// Search
document.getElementById('searchBtn').addEventListener('click', () => {
            currentSearch = document.getElementById('searchInput').value;
            currentStatus = document.getElementById('statusFilter').value;
            currentLimit = parseInt(document.getElementById('limitSelect').value);
            currentPage = 1;
            loadEntries();
        });

// Export
document.getElementById('exportBtn').addEventListener('click', () => {
            window.open(`/api/entries/export?format=excel`, '_blank');
        });

// Navigation buttons
document.getElementById('entryBtn').addEventListener('click', () => {
            window.location.href = '/entry.html';
        });

document.getElementById('logoutBtn').addEventListener('click', async () => {
            if (!confirm('Are you sure you want to logout?')) return;

            try {
                await fetch('/api/auth/logout', {
                    method: 'POST',
                    headers: { 'Authorization': `Bearer ${accessToken}` }
                });
            } finally {
                localStorage.clear();
                window.location.href = '/login.html';
            }
        });

// Toast notification
function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast .className = `custom-toast toast-$

{
    type
}

`;

const icon = type === 'success' ? 'check-circle' :
type === 'error' ? 'exclamation-circle' : 'info-circle';

toast.innerHTML = `<i class="fas fa-${icon}" > </i > <div > $ {
    message
}

</div > `;
document.getElementById('toastContainer').appendChild(toast);

setTimeout(() => toast.remove(), 4000);
}
</script >
</body >
</html >
